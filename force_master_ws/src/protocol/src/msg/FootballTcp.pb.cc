// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FootballTcp.proto

#include "FootballTcp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace FootballTcp {
class Unity2UbuntuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unity2Ubuntu>
      _instance;
} _Unity2Ubuntu_default_instance_;
class Ubuntu2UnityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ubuntu2Unity>
      _instance;
} _Ubuntu2Unity_default_instance_;
}  // namespace FootballTcp
namespace protobuf_FootballTcp_2eproto {
static void InitDefaultsUnity2Ubuntu() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FootballTcp::_Unity2Ubuntu_default_instance_;
    new (ptr) ::FootballTcp::Unity2Ubuntu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FootballTcp::Unity2Ubuntu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Unity2Ubuntu =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnity2Ubuntu}, {}};

static void InitDefaultsUbuntu2Unity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FootballTcp::_Ubuntu2Unity_default_instance_;
    new (ptr) ::FootballTcp::Ubuntu2Unity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FootballTcp::Ubuntu2Unity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ubuntu2Unity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUbuntu2Unity}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Unity2Ubuntu.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ubuntu2Unity.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FootballTcp::Unity2Ubuntu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FootballTcp::Unity2Ubuntu, datarequire_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FootballTcp::Ubuntu2Unity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FootballTcp::Ubuntu2Unity, tcpgesture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FootballTcp::Ubuntu2Unity, tcpspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FootballTcp::Ubuntu2Unity, gamereplay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FootballTcp::Ubuntu2Unity, gamedevice_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::FootballTcp::Unity2Ubuntu)},
  { 6, -1, sizeof(::FootballTcp::Ubuntu2Unity)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::FootballTcp::_Unity2Ubuntu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::FootballTcp::_Ubuntu2Unity_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "FootballTcp.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021FootballTcp.proto\022\013FootballTcp\"\211\001\n\014Uni"
      "ty2Ubuntu\022>\n\013DataRequire\030\001 \001(\0162).Footbal"
      "lTcp.Unity2Ubuntu.DataRequireEnum\"9\n\017Dat"
      "aRequireEnum\022\024\n\020data_not_require\020\000\022\020\n\014da"
      "ta_require\020\001\"\246\002\n\014Ubuntu2Unity\022\022\n\nTCPGest"
      "ure\030\001 \003(\002\022\020\n\010TCPSpeed\030\002 \003(\002\022<\n\nGameRepla"
      "y\030\003 \001(\0162(.FootballTcp.Ubuntu2Unity.GameR"
      "eplayEnum\022<\n\nGameDevice\030\004 \001(\0162(.Football"
      "Tcp.Ubuntu2Unity.GameDeviceEnum\"N\n\016GameR"
      "eplayEnum\022\014\n\010game_ing\020\000\022\r\n\tgame_back\020\001\022\017"
      "\n\013game_replay\020\002\022\016\n\ngame_pause\020\003\"$\n\016GameD"
      "eviceEnum\022\006\n\002vr\020\000\022\n\n\006screen\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FootballTcp.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_FootballTcp_2eproto
namespace FootballTcp {
const ::google::protobuf::EnumDescriptor* Unity2Ubuntu_DataRequireEnum_descriptor() {
  protobuf_FootballTcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FootballTcp_2eproto::file_level_enum_descriptors[0];
}
bool Unity2Ubuntu_DataRequireEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Unity2Ubuntu_DataRequireEnum Unity2Ubuntu::data_not_require;
const Unity2Ubuntu_DataRequireEnum Unity2Ubuntu::data_require;
const Unity2Ubuntu_DataRequireEnum Unity2Ubuntu::DataRequireEnum_MIN;
const Unity2Ubuntu_DataRequireEnum Unity2Ubuntu::DataRequireEnum_MAX;
const int Unity2Ubuntu::DataRequireEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ubuntu2Unity_GameReplayEnum_descriptor() {
  protobuf_FootballTcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FootballTcp_2eproto::file_level_enum_descriptors[1];
}
bool Ubuntu2Unity_GameReplayEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ubuntu2Unity_GameReplayEnum Ubuntu2Unity::game_ing;
const Ubuntu2Unity_GameReplayEnum Ubuntu2Unity::game_back;
const Ubuntu2Unity_GameReplayEnum Ubuntu2Unity::game_replay;
const Ubuntu2Unity_GameReplayEnum Ubuntu2Unity::game_pause;
const Ubuntu2Unity_GameReplayEnum Ubuntu2Unity::GameReplayEnum_MIN;
const Ubuntu2Unity_GameReplayEnum Ubuntu2Unity::GameReplayEnum_MAX;
const int Ubuntu2Unity::GameReplayEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ubuntu2Unity_GameDeviceEnum_descriptor() {
  protobuf_FootballTcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FootballTcp_2eproto::file_level_enum_descriptors[2];
}
bool Ubuntu2Unity_GameDeviceEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ubuntu2Unity_GameDeviceEnum Ubuntu2Unity::vr;
const Ubuntu2Unity_GameDeviceEnum Ubuntu2Unity::screen;
const Ubuntu2Unity_GameDeviceEnum Ubuntu2Unity::GameDeviceEnum_MIN;
const Ubuntu2Unity_GameDeviceEnum Ubuntu2Unity::GameDeviceEnum_MAX;
const int Ubuntu2Unity::GameDeviceEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Unity2Ubuntu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unity2Ubuntu::kDataRequireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unity2Ubuntu::Unity2Ubuntu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_FootballTcp_2eproto::scc_info_Unity2Ubuntu.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:FootballTcp.Unity2Ubuntu)
}
Unity2Ubuntu::Unity2Ubuntu(const Unity2Ubuntu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datarequire_ = from.datarequire_;
  // @@protoc_insertion_point(copy_constructor:FootballTcp.Unity2Ubuntu)
}

void Unity2Ubuntu::SharedCtor() {
  datarequire_ = 0;
}

Unity2Ubuntu::~Unity2Ubuntu() {
  // @@protoc_insertion_point(destructor:FootballTcp.Unity2Ubuntu)
  SharedDtor();
}

void Unity2Ubuntu::SharedDtor() {
}

void Unity2Ubuntu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unity2Ubuntu::descriptor() {
  ::protobuf_FootballTcp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FootballTcp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unity2Ubuntu& Unity2Ubuntu::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_FootballTcp_2eproto::scc_info_Unity2Ubuntu.base);
  return *internal_default_instance();
}


void Unity2Ubuntu::Clear() {
// @@protoc_insertion_point(message_clear_start:FootballTcp.Unity2Ubuntu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datarequire_ = 0;
  _internal_metadata_.Clear();
}

bool Unity2Ubuntu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FootballTcp.Unity2Ubuntu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .FootballTcp.Unity2Ubuntu.DataRequireEnum DataRequire = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datarequire(static_cast< ::FootballTcp::Unity2Ubuntu_DataRequireEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FootballTcp.Unity2Ubuntu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FootballTcp.Unity2Ubuntu)
  return false;
#undef DO_
}

void Unity2Ubuntu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FootballTcp.Unity2Ubuntu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FootballTcp.Unity2Ubuntu.DataRequireEnum DataRequire = 1;
  if (this->datarequire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datarequire(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:FootballTcp.Unity2Ubuntu)
}

::google::protobuf::uint8* Unity2Ubuntu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FootballTcp.Unity2Ubuntu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FootballTcp.Unity2Ubuntu.DataRequireEnum DataRequire = 1;
  if (this->datarequire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datarequire(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FootballTcp.Unity2Ubuntu)
  return target;
}

size_t Unity2Ubuntu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FootballTcp.Unity2Ubuntu)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .FootballTcp.Unity2Ubuntu.DataRequireEnum DataRequire = 1;
  if (this->datarequire() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datarequire());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unity2Ubuntu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FootballTcp.Unity2Ubuntu)
  GOOGLE_DCHECK_NE(&from, this);
  const Unity2Ubuntu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unity2Ubuntu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FootballTcp.Unity2Ubuntu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FootballTcp.Unity2Ubuntu)
    MergeFrom(*source);
  }
}

void Unity2Ubuntu::MergeFrom(const Unity2Ubuntu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FootballTcp.Unity2Ubuntu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datarequire() != 0) {
    set_datarequire(from.datarequire());
  }
}

void Unity2Ubuntu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FootballTcp.Unity2Ubuntu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unity2Ubuntu::CopyFrom(const Unity2Ubuntu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FootballTcp.Unity2Ubuntu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unity2Ubuntu::IsInitialized() const {
  return true;
}

void Unity2Ubuntu::Swap(Unity2Ubuntu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unity2Ubuntu::InternalSwap(Unity2Ubuntu* other) {
  using std::swap;
  swap(datarequire_, other->datarequire_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unity2Ubuntu::GetMetadata() const {
  protobuf_FootballTcp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FootballTcp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ubuntu2Unity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ubuntu2Unity::kTCPGestureFieldNumber;
const int Ubuntu2Unity::kTCPSpeedFieldNumber;
const int Ubuntu2Unity::kGameReplayFieldNumber;
const int Ubuntu2Unity::kGameDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ubuntu2Unity::Ubuntu2Unity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_FootballTcp_2eproto::scc_info_Ubuntu2Unity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:FootballTcp.Ubuntu2Unity)
}
Ubuntu2Unity::Ubuntu2Unity(const Ubuntu2Unity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tcpgesture_(from.tcpgesture_),
      tcpspeed_(from.tcpspeed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gamereplay_, &from.gamereplay_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamedevice_) -
    reinterpret_cast<char*>(&gamereplay_)) + sizeof(gamedevice_));
  // @@protoc_insertion_point(copy_constructor:FootballTcp.Ubuntu2Unity)
}

void Ubuntu2Unity::SharedCtor() {
  ::memset(&gamereplay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamedevice_) -
      reinterpret_cast<char*>(&gamereplay_)) + sizeof(gamedevice_));
}

Ubuntu2Unity::~Ubuntu2Unity() {
  // @@protoc_insertion_point(destructor:FootballTcp.Ubuntu2Unity)
  SharedDtor();
}

void Ubuntu2Unity::SharedDtor() {
}

void Ubuntu2Unity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ubuntu2Unity::descriptor() {
  ::protobuf_FootballTcp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FootballTcp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ubuntu2Unity& Ubuntu2Unity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_FootballTcp_2eproto::scc_info_Ubuntu2Unity.base);
  return *internal_default_instance();
}


void Ubuntu2Unity::Clear() {
// @@protoc_insertion_point(message_clear_start:FootballTcp.Ubuntu2Unity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tcpgesture_.Clear();
  tcpspeed_.Clear();
  ::memset(&gamereplay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamedevice_) -
      reinterpret_cast<char*>(&gamereplay_)) + sizeof(gamedevice_));
  _internal_metadata_.Clear();
}

bool Ubuntu2Unity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FootballTcp.Ubuntu2Unity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float TCPGesture = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tcpgesture())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tcpgesture())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float TCPSpeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tcpspeed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tcpspeed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FootballTcp.Ubuntu2Unity.GameReplayEnum GameReplay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gamereplay(static_cast< ::FootballTcp::Ubuntu2Unity_GameReplayEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FootballTcp.Ubuntu2Unity.GameDeviceEnum GameDevice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gamedevice(static_cast< ::FootballTcp::Ubuntu2Unity_GameDeviceEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FootballTcp.Ubuntu2Unity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FootballTcp.Ubuntu2Unity)
  return false;
#undef DO_
}

void Ubuntu2Unity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FootballTcp.Ubuntu2Unity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float TCPGesture = 1;
  if (this->tcpgesture_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tcpgesture_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->tcpgesture().data(), this->tcpgesture_size(), output);
  }

  // repeated float TCPSpeed = 2;
  if (this->tcpspeed_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tcpspeed_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->tcpspeed().data(), this->tcpspeed_size(), output);
  }

  // .FootballTcp.Ubuntu2Unity.GameReplayEnum GameReplay = 3;
  if (this->gamereplay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamereplay(), output);
  }

  // .FootballTcp.Ubuntu2Unity.GameDeviceEnum GameDevice = 4;
  if (this->gamedevice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gamedevice(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:FootballTcp.Ubuntu2Unity)
}

::google::protobuf::uint8* Ubuntu2Unity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FootballTcp.Ubuntu2Unity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float TCPGesture = 1;
  if (this->tcpgesture_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tcpgesture_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tcpgesture_, target);
  }

  // repeated float TCPSpeed = 2;
  if (this->tcpspeed_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tcpspeed_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tcpspeed_, target);
  }

  // .FootballTcp.Ubuntu2Unity.GameReplayEnum GameReplay = 3;
  if (this->gamereplay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gamereplay(), target);
  }

  // .FootballTcp.Ubuntu2Unity.GameDeviceEnum GameDevice = 4;
  if (this->gamedevice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gamedevice(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FootballTcp.Ubuntu2Unity)
  return target;
}

size_t Ubuntu2Unity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FootballTcp.Ubuntu2Unity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float TCPGesture = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tcpgesture_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tcpgesture_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float TCPSpeed = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tcpspeed_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tcpspeed_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .FootballTcp.Ubuntu2Unity.GameReplayEnum GameReplay = 3;
  if (this->gamereplay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamereplay());
  }

  // .FootballTcp.Ubuntu2Unity.GameDeviceEnum GameDevice = 4;
  if (this->gamedevice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamedevice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ubuntu2Unity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FootballTcp.Ubuntu2Unity)
  GOOGLE_DCHECK_NE(&from, this);
  const Ubuntu2Unity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ubuntu2Unity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FootballTcp.Ubuntu2Unity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FootballTcp.Ubuntu2Unity)
    MergeFrom(*source);
  }
}

void Ubuntu2Unity::MergeFrom(const Ubuntu2Unity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FootballTcp.Ubuntu2Unity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tcpgesture_.MergeFrom(from.tcpgesture_);
  tcpspeed_.MergeFrom(from.tcpspeed_);
  if (from.gamereplay() != 0) {
    set_gamereplay(from.gamereplay());
  }
  if (from.gamedevice() != 0) {
    set_gamedevice(from.gamedevice());
  }
}

void Ubuntu2Unity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FootballTcp.Ubuntu2Unity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ubuntu2Unity::CopyFrom(const Ubuntu2Unity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FootballTcp.Ubuntu2Unity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ubuntu2Unity::IsInitialized() const {
  return true;
}

void Ubuntu2Unity::Swap(Ubuntu2Unity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ubuntu2Unity::InternalSwap(Ubuntu2Unity* other) {
  using std::swap;
  tcpgesture_.InternalSwap(&other->tcpgesture_);
  tcpspeed_.InternalSwap(&other->tcpspeed_);
  swap(gamereplay_, other->gamereplay_);
  swap(gamedevice_, other->gamedevice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ubuntu2Unity::GetMetadata() const {
  protobuf_FootballTcp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FootballTcp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FootballTcp
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::FootballTcp::Unity2Ubuntu* Arena::CreateMaybeMessage< ::FootballTcp::Unity2Ubuntu >(Arena* arena) {
  return Arena::CreateInternal< ::FootballTcp::Unity2Ubuntu >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::FootballTcp::Ubuntu2Unity* Arena::CreateMaybeMessage< ::FootballTcp::Ubuntu2Unity >(Arena* arena) {
  return Arena::CreateInternal< ::FootballTcp::Ubuntu2Unity >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
