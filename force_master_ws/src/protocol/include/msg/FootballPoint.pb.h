// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FootballPoint.proto

#ifndef PROTOBUF_INCLUDED_FootballPoint_2eproto
#define PROTOBUF_INCLUDED_FootballPoint_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FootballPoint_2eproto 

namespace protobuf_FootballPoint_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_FootballPoint_2eproto
namespace FootballPoint {
class Ubuntu2Unity;
class Ubuntu2UnityDefaultTypeInternal;
extern Ubuntu2UnityDefaultTypeInternal _Ubuntu2Unity_default_instance_;
class Unity2Ubuntu;
class Unity2UbuntuDefaultTypeInternal;
extern Unity2UbuntuDefaultTypeInternal _Unity2Ubuntu_default_instance_;
class Unity2Ubuntu_Point;
class Unity2Ubuntu_PointDefaultTypeInternal;
extern Unity2Ubuntu_PointDefaultTypeInternal _Unity2Ubuntu_Point_default_instance_;
}  // namespace FootballPoint
namespace google {
namespace protobuf {
template<> ::FootballPoint::Ubuntu2Unity* Arena::CreateMaybeMessage<::FootballPoint::Ubuntu2Unity>(Arena*);
template<> ::FootballPoint::Unity2Ubuntu* Arena::CreateMaybeMessage<::FootballPoint::Unity2Ubuntu>(Arena*);
template<> ::FootballPoint::Unity2Ubuntu_Point* Arena::CreateMaybeMessage<::FootballPoint::Unity2Ubuntu_Point>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace FootballPoint {

enum Unity2Ubuntu_GameReplayEnum {
  Unity2Ubuntu_GameReplayEnum_game_ing = 0,
  Unity2Ubuntu_GameReplayEnum_game_back = 1,
  Unity2Ubuntu_GameReplayEnum_game_replay = 2,
  Unity2Ubuntu_GameReplayEnum_Unity2Ubuntu_GameReplayEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Unity2Ubuntu_GameReplayEnum_Unity2Ubuntu_GameReplayEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Unity2Ubuntu_GameReplayEnum_IsValid(int value);
const Unity2Ubuntu_GameReplayEnum Unity2Ubuntu_GameReplayEnum_GameReplayEnum_MIN = Unity2Ubuntu_GameReplayEnum_game_ing;
const Unity2Ubuntu_GameReplayEnum Unity2Ubuntu_GameReplayEnum_GameReplayEnum_MAX = Unity2Ubuntu_GameReplayEnum_game_replay;
const int Unity2Ubuntu_GameReplayEnum_GameReplayEnum_ARRAYSIZE = Unity2Ubuntu_GameReplayEnum_GameReplayEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* Unity2Ubuntu_GameReplayEnum_descriptor();
inline const ::std::string& Unity2Ubuntu_GameReplayEnum_Name(Unity2Ubuntu_GameReplayEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    Unity2Ubuntu_GameReplayEnum_descriptor(), value);
}
inline bool Unity2Ubuntu_GameReplayEnum_Parse(
    const ::std::string& name, Unity2Ubuntu_GameReplayEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Unity2Ubuntu_GameReplayEnum>(
    Unity2Ubuntu_GameReplayEnum_descriptor(), name, value);
}
enum Unity2Ubuntu_ClockwiseEnum {
  Unity2Ubuntu_ClockwiseEnum_none = 0,
  Unity2Ubuntu_ClockwiseEnum_clockwise = 1,
  Unity2Ubuntu_ClockwiseEnum_counter_clockwise = 2,
  Unity2Ubuntu_ClockwiseEnum_Unity2Ubuntu_ClockwiseEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Unity2Ubuntu_ClockwiseEnum_Unity2Ubuntu_ClockwiseEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Unity2Ubuntu_ClockwiseEnum_IsValid(int value);
const Unity2Ubuntu_ClockwiseEnum Unity2Ubuntu_ClockwiseEnum_ClockwiseEnum_MIN = Unity2Ubuntu_ClockwiseEnum_none;
const Unity2Ubuntu_ClockwiseEnum Unity2Ubuntu_ClockwiseEnum_ClockwiseEnum_MAX = Unity2Ubuntu_ClockwiseEnum_counter_clockwise;
const int Unity2Ubuntu_ClockwiseEnum_ClockwiseEnum_ARRAYSIZE = Unity2Ubuntu_ClockwiseEnum_ClockwiseEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* Unity2Ubuntu_ClockwiseEnum_descriptor();
inline const ::std::string& Unity2Ubuntu_ClockwiseEnum_Name(Unity2Ubuntu_ClockwiseEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    Unity2Ubuntu_ClockwiseEnum_descriptor(), value);
}
inline bool Unity2Ubuntu_ClockwiseEnum_Parse(
    const ::std::string& name, Unity2Ubuntu_ClockwiseEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Unity2Ubuntu_ClockwiseEnum>(
    Unity2Ubuntu_ClockwiseEnum_descriptor(), name, value);
}
enum Ubuntu2Unity_DataReceivedEnum {
  Ubuntu2Unity_DataReceivedEnum_data_not_received = 0,
  Ubuntu2Unity_DataReceivedEnum_data_received = 1,
  Ubuntu2Unity_DataReceivedEnum_Ubuntu2Unity_DataReceivedEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ubuntu2Unity_DataReceivedEnum_Ubuntu2Unity_DataReceivedEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ubuntu2Unity_DataReceivedEnum_IsValid(int value);
const Ubuntu2Unity_DataReceivedEnum Ubuntu2Unity_DataReceivedEnum_DataReceivedEnum_MIN = Ubuntu2Unity_DataReceivedEnum_data_not_received;
const Ubuntu2Unity_DataReceivedEnum Ubuntu2Unity_DataReceivedEnum_DataReceivedEnum_MAX = Ubuntu2Unity_DataReceivedEnum_data_received;
const int Ubuntu2Unity_DataReceivedEnum_DataReceivedEnum_ARRAYSIZE = Ubuntu2Unity_DataReceivedEnum_DataReceivedEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ubuntu2Unity_DataReceivedEnum_descriptor();
inline const ::std::string& Ubuntu2Unity_DataReceivedEnum_Name(Ubuntu2Unity_DataReceivedEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ubuntu2Unity_DataReceivedEnum_descriptor(), value);
}
inline bool Ubuntu2Unity_DataReceivedEnum_Parse(
    const ::std::string& name, Ubuntu2Unity_DataReceivedEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ubuntu2Unity_DataReceivedEnum>(
    Ubuntu2Unity_DataReceivedEnum_descriptor(), name, value);
}
// ===================================================================

class Unity2Ubuntu_Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FootballPoint.Unity2Ubuntu.Point) */ {
 public:
  Unity2Ubuntu_Point();
  virtual ~Unity2Ubuntu_Point();

  Unity2Ubuntu_Point(const Unity2Ubuntu_Point& from);

  inline Unity2Ubuntu_Point& operator=(const Unity2Ubuntu_Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Unity2Ubuntu_Point(Unity2Ubuntu_Point&& from) noexcept
    : Unity2Ubuntu_Point() {
    *this = ::std::move(from);
  }

  inline Unity2Ubuntu_Point& operator=(Unity2Ubuntu_Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Unity2Ubuntu_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unity2Ubuntu_Point* internal_default_instance() {
    return reinterpret_cast<const Unity2Ubuntu_Point*>(
               &_Unity2Ubuntu_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Unity2Ubuntu_Point* other);
  friend void swap(Unity2Ubuntu_Point& a, Unity2Ubuntu_Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unity2Ubuntu_Point* New() const final {
    return CreateMaybeMessage<Unity2Ubuntu_Point>(NULL);
  }

  Unity2Ubuntu_Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Unity2Ubuntu_Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Unity2Ubuntu_Point& from);
  void MergeFrom(const Unity2Ubuntu_Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unity2Ubuntu_Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:FootballPoint.Unity2Ubuntu.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FootballPoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Unity2Ubuntu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FootballPoint.Unity2Ubuntu) */ {
 public:
  Unity2Ubuntu();
  virtual ~Unity2Ubuntu();

  Unity2Ubuntu(const Unity2Ubuntu& from);

  inline Unity2Ubuntu& operator=(const Unity2Ubuntu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Unity2Ubuntu(Unity2Ubuntu&& from) noexcept
    : Unity2Ubuntu() {
    *this = ::std::move(from);
  }

  inline Unity2Ubuntu& operator=(Unity2Ubuntu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Unity2Ubuntu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unity2Ubuntu* internal_default_instance() {
    return reinterpret_cast<const Unity2Ubuntu*>(
               &_Unity2Ubuntu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Unity2Ubuntu* other);
  friend void swap(Unity2Ubuntu& a, Unity2Ubuntu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unity2Ubuntu* New() const final {
    return CreateMaybeMessage<Unity2Ubuntu>(NULL);
  }

  Unity2Ubuntu* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Unity2Ubuntu>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Unity2Ubuntu& from);
  void MergeFrom(const Unity2Ubuntu& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unity2Ubuntu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Unity2Ubuntu_Point Point;

  typedef Unity2Ubuntu_GameReplayEnum GameReplayEnum;
  static const GameReplayEnum game_ing =
    Unity2Ubuntu_GameReplayEnum_game_ing;
  static const GameReplayEnum game_back =
    Unity2Ubuntu_GameReplayEnum_game_back;
  static const GameReplayEnum game_replay =
    Unity2Ubuntu_GameReplayEnum_game_replay;
  static inline bool GameReplayEnum_IsValid(int value) {
    return Unity2Ubuntu_GameReplayEnum_IsValid(value);
  }
  static const GameReplayEnum GameReplayEnum_MIN =
    Unity2Ubuntu_GameReplayEnum_GameReplayEnum_MIN;
  static const GameReplayEnum GameReplayEnum_MAX =
    Unity2Ubuntu_GameReplayEnum_GameReplayEnum_MAX;
  static const int GameReplayEnum_ARRAYSIZE =
    Unity2Ubuntu_GameReplayEnum_GameReplayEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GameReplayEnum_descriptor() {
    return Unity2Ubuntu_GameReplayEnum_descriptor();
  }
  static inline const ::std::string& GameReplayEnum_Name(GameReplayEnum value) {
    return Unity2Ubuntu_GameReplayEnum_Name(value);
  }
  static inline bool GameReplayEnum_Parse(const ::std::string& name,
      GameReplayEnum* value) {
    return Unity2Ubuntu_GameReplayEnum_Parse(name, value);
  }

  typedef Unity2Ubuntu_ClockwiseEnum ClockwiseEnum;
  static const ClockwiseEnum none =
    Unity2Ubuntu_ClockwiseEnum_none;
  static const ClockwiseEnum clockwise =
    Unity2Ubuntu_ClockwiseEnum_clockwise;
  static const ClockwiseEnum counter_clockwise =
    Unity2Ubuntu_ClockwiseEnum_counter_clockwise;
  static inline bool ClockwiseEnum_IsValid(int value) {
    return Unity2Ubuntu_ClockwiseEnum_IsValid(value);
  }
  static const ClockwiseEnum ClockwiseEnum_MIN =
    Unity2Ubuntu_ClockwiseEnum_ClockwiseEnum_MIN;
  static const ClockwiseEnum ClockwiseEnum_MAX =
    Unity2Ubuntu_ClockwiseEnum_ClockwiseEnum_MAX;
  static const int ClockwiseEnum_ARRAYSIZE =
    Unity2Ubuntu_ClockwiseEnum_ClockwiseEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ClockwiseEnum_descriptor() {
    return Unity2Ubuntu_ClockwiseEnum_descriptor();
  }
  static inline const ::std::string& ClockwiseEnum_Name(ClockwiseEnum value) {
    return Unity2Ubuntu_ClockwiseEnum_Name(value);
  }
  static inline bool ClockwiseEnum_Parse(const ::std::string& name,
      ClockwiseEnum* value) {
    return Unity2Ubuntu_ClockwiseEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .FootballPoint.Unity2Ubuntu.Point PointFootball = 1;
  bool has_pointfootball() const;
  void clear_pointfootball();
  static const int kPointFootballFieldNumber = 1;
  private:
  const ::FootballPoint::Unity2Ubuntu_Point& _internal_pointfootball() const;
  public:
  const ::FootballPoint::Unity2Ubuntu_Point& pointfootball() const;
  ::FootballPoint::Unity2Ubuntu_Point* release_pointfootball();
  ::FootballPoint::Unity2Ubuntu_Point* mutable_pointfootball();
  void set_allocated_pointfootball(::FootballPoint::Unity2Ubuntu_Point* pointfootball);

  // .FootballPoint.Unity2Ubuntu.Point PointShoot = 3;
  bool has_pointshoot() const;
  void clear_pointshoot();
  static const int kPointShootFieldNumber = 3;
  private:
  const ::FootballPoint::Unity2Ubuntu_Point& _internal_pointshoot() const;
  public:
  const ::FootballPoint::Unity2Ubuntu_Point& pointshoot() const;
  ::FootballPoint::Unity2Ubuntu_Point* release_pointshoot();
  ::FootballPoint::Unity2Ubuntu_Point* mutable_pointshoot();
  void set_allocated_pointshoot(::FootballPoint::Unity2Ubuntu_Point* pointshoot);

  // .FootballPoint.Unity2Ubuntu.Point PointTangency = 4;
  bool has_pointtangency() const;
  void clear_pointtangency();
  static const int kPointTangencyFieldNumber = 4;
  private:
  const ::FootballPoint::Unity2Ubuntu_Point& _internal_pointtangency() const;
  public:
  const ::FootballPoint::Unity2Ubuntu_Point& pointtangency() const;
  ::FootballPoint::Unity2Ubuntu_Point* release_pointtangency();
  ::FootballPoint::Unity2Ubuntu_Point* mutable_pointtangency();
  void set_allocated_pointtangency(::FootballPoint::Unity2Ubuntu_Point* pointtangency);

  // float Radium = 2;
  void clear_radium();
  static const int kRadiumFieldNumber = 2;
  float radium() const;
  void set_radium(float value);

  // bool IfShoot = 5;
  void clear_ifshoot();
  static const int kIfShootFieldNumber = 5;
  bool ifshoot() const;
  void set_ifshoot(bool value);

  // .FootballPoint.Unity2Ubuntu.GameReplayEnum GameReplay = 6;
  void clear_gamereplay();
  static const int kGameReplayFieldNumber = 6;
  ::FootballPoint::Unity2Ubuntu_GameReplayEnum gamereplay() const;
  void set_gamereplay(::FootballPoint::Unity2Ubuntu_GameReplayEnum value);

  // .FootballPoint.Unity2Ubuntu.ClockwiseEnum ClockDirection = 7;
  void clear_clockdirection();
  static const int kClockDirectionFieldNumber = 7;
  ::FootballPoint::Unity2Ubuntu_ClockwiseEnum clockdirection() const;
  void set_clockdirection(::FootballPoint::Unity2Ubuntu_ClockwiseEnum value);

  // @@protoc_insertion_point(class_scope:FootballPoint.Unity2Ubuntu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::FootballPoint::Unity2Ubuntu_Point* pointfootball_;
  ::FootballPoint::Unity2Ubuntu_Point* pointshoot_;
  ::FootballPoint::Unity2Ubuntu_Point* pointtangency_;
  float radium_;
  bool ifshoot_;
  int gamereplay_;
  int clockdirection_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FootballPoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ubuntu2Unity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FootballPoint.Ubuntu2Unity) */ {
 public:
  Ubuntu2Unity();
  virtual ~Ubuntu2Unity();

  Ubuntu2Unity(const Ubuntu2Unity& from);

  inline Ubuntu2Unity& operator=(const Ubuntu2Unity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ubuntu2Unity(Ubuntu2Unity&& from) noexcept
    : Ubuntu2Unity() {
    *this = ::std::move(from);
  }

  inline Ubuntu2Unity& operator=(Ubuntu2Unity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ubuntu2Unity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ubuntu2Unity* internal_default_instance() {
    return reinterpret_cast<const Ubuntu2Unity*>(
               &_Ubuntu2Unity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Ubuntu2Unity* other);
  friend void swap(Ubuntu2Unity& a, Ubuntu2Unity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ubuntu2Unity* New() const final {
    return CreateMaybeMessage<Ubuntu2Unity>(NULL);
  }

  Ubuntu2Unity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ubuntu2Unity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ubuntu2Unity& from);
  void MergeFrom(const Ubuntu2Unity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ubuntu2Unity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ubuntu2Unity_DataReceivedEnum DataReceivedEnum;
  static const DataReceivedEnum data_not_received =
    Ubuntu2Unity_DataReceivedEnum_data_not_received;
  static const DataReceivedEnum data_received =
    Ubuntu2Unity_DataReceivedEnum_data_received;
  static inline bool DataReceivedEnum_IsValid(int value) {
    return Ubuntu2Unity_DataReceivedEnum_IsValid(value);
  }
  static const DataReceivedEnum DataReceivedEnum_MIN =
    Ubuntu2Unity_DataReceivedEnum_DataReceivedEnum_MIN;
  static const DataReceivedEnum DataReceivedEnum_MAX =
    Ubuntu2Unity_DataReceivedEnum_DataReceivedEnum_MAX;
  static const int DataReceivedEnum_ARRAYSIZE =
    Ubuntu2Unity_DataReceivedEnum_DataReceivedEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataReceivedEnum_descriptor() {
    return Ubuntu2Unity_DataReceivedEnum_descriptor();
  }
  static inline const ::std::string& DataReceivedEnum_Name(DataReceivedEnum value) {
    return Ubuntu2Unity_DataReceivedEnum_Name(value);
  }
  static inline bool DataReceivedEnum_Parse(const ::std::string& name,
      DataReceivedEnum* value) {
    return Ubuntu2Unity_DataReceivedEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .FootballPoint.Ubuntu2Unity.DataReceivedEnum DataReceived = 1;
  void clear_datareceived();
  static const int kDataReceivedFieldNumber = 1;
  ::FootballPoint::Ubuntu2Unity_DataReceivedEnum datareceived() const;
  void set_datareceived(::FootballPoint::Ubuntu2Unity_DataReceivedEnum value);

  // @@protoc_insertion_point(class_scope:FootballPoint.Ubuntu2Unity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int datareceived_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FootballPoint_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Unity2Ubuntu_Point

// float x = 1;
inline void Unity2Ubuntu_Point::clear_x() {
  x_ = 0;
}
inline float Unity2Ubuntu_Point::x() const {
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.Point.x)
  return x_;
}
inline void Unity2Ubuntu_Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:FootballPoint.Unity2Ubuntu.Point.x)
}

// float y = 2;
inline void Unity2Ubuntu_Point::clear_y() {
  y_ = 0;
}
inline float Unity2Ubuntu_Point::y() const {
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.Point.y)
  return y_;
}
inline void Unity2Ubuntu_Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:FootballPoint.Unity2Ubuntu.Point.y)
}

// -------------------------------------------------------------------

// Unity2Ubuntu

// .FootballPoint.Unity2Ubuntu.Point PointFootball = 1;
inline bool Unity2Ubuntu::has_pointfootball() const {
  return this != internal_default_instance() && pointfootball_ != NULL;
}
inline void Unity2Ubuntu::clear_pointfootball() {
  if (GetArenaNoVirtual() == NULL && pointfootball_ != NULL) {
    delete pointfootball_;
  }
  pointfootball_ = NULL;
}
inline const ::FootballPoint::Unity2Ubuntu_Point& Unity2Ubuntu::_internal_pointfootball() const {
  return *pointfootball_;
}
inline const ::FootballPoint::Unity2Ubuntu_Point& Unity2Ubuntu::pointfootball() const {
  const ::FootballPoint::Unity2Ubuntu_Point* p = pointfootball_;
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.PointFootball)
  return p != NULL ? *p : *reinterpret_cast<const ::FootballPoint::Unity2Ubuntu_Point*>(
      &::FootballPoint::_Unity2Ubuntu_Point_default_instance_);
}
inline ::FootballPoint::Unity2Ubuntu_Point* Unity2Ubuntu::release_pointfootball() {
  // @@protoc_insertion_point(field_release:FootballPoint.Unity2Ubuntu.PointFootball)
  
  ::FootballPoint::Unity2Ubuntu_Point* temp = pointfootball_;
  pointfootball_ = NULL;
  return temp;
}
inline ::FootballPoint::Unity2Ubuntu_Point* Unity2Ubuntu::mutable_pointfootball() {
  
  if (pointfootball_ == NULL) {
    auto* p = CreateMaybeMessage<::FootballPoint::Unity2Ubuntu_Point>(GetArenaNoVirtual());
    pointfootball_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FootballPoint.Unity2Ubuntu.PointFootball)
  return pointfootball_;
}
inline void Unity2Ubuntu::set_allocated_pointfootball(::FootballPoint::Unity2Ubuntu_Point* pointfootball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pointfootball_;
  }
  if (pointfootball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pointfootball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pointfootball, submessage_arena);
    }
    
  } else {
    
  }
  pointfootball_ = pointfootball;
  // @@protoc_insertion_point(field_set_allocated:FootballPoint.Unity2Ubuntu.PointFootball)
}

// float Radium = 2;
inline void Unity2Ubuntu::clear_radium() {
  radium_ = 0;
}
inline float Unity2Ubuntu::radium() const {
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.Radium)
  return radium_;
}
inline void Unity2Ubuntu::set_radium(float value) {
  
  radium_ = value;
  // @@protoc_insertion_point(field_set:FootballPoint.Unity2Ubuntu.Radium)
}

// .FootballPoint.Unity2Ubuntu.Point PointShoot = 3;
inline bool Unity2Ubuntu::has_pointshoot() const {
  return this != internal_default_instance() && pointshoot_ != NULL;
}
inline void Unity2Ubuntu::clear_pointshoot() {
  if (GetArenaNoVirtual() == NULL && pointshoot_ != NULL) {
    delete pointshoot_;
  }
  pointshoot_ = NULL;
}
inline const ::FootballPoint::Unity2Ubuntu_Point& Unity2Ubuntu::_internal_pointshoot() const {
  return *pointshoot_;
}
inline const ::FootballPoint::Unity2Ubuntu_Point& Unity2Ubuntu::pointshoot() const {
  const ::FootballPoint::Unity2Ubuntu_Point* p = pointshoot_;
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.PointShoot)
  return p != NULL ? *p : *reinterpret_cast<const ::FootballPoint::Unity2Ubuntu_Point*>(
      &::FootballPoint::_Unity2Ubuntu_Point_default_instance_);
}
inline ::FootballPoint::Unity2Ubuntu_Point* Unity2Ubuntu::release_pointshoot() {
  // @@protoc_insertion_point(field_release:FootballPoint.Unity2Ubuntu.PointShoot)
  
  ::FootballPoint::Unity2Ubuntu_Point* temp = pointshoot_;
  pointshoot_ = NULL;
  return temp;
}
inline ::FootballPoint::Unity2Ubuntu_Point* Unity2Ubuntu::mutable_pointshoot() {
  
  if (pointshoot_ == NULL) {
    auto* p = CreateMaybeMessage<::FootballPoint::Unity2Ubuntu_Point>(GetArenaNoVirtual());
    pointshoot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FootballPoint.Unity2Ubuntu.PointShoot)
  return pointshoot_;
}
inline void Unity2Ubuntu::set_allocated_pointshoot(::FootballPoint::Unity2Ubuntu_Point* pointshoot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pointshoot_;
  }
  if (pointshoot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pointshoot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pointshoot, submessage_arena);
    }
    
  } else {
    
  }
  pointshoot_ = pointshoot;
  // @@protoc_insertion_point(field_set_allocated:FootballPoint.Unity2Ubuntu.PointShoot)
}

// .FootballPoint.Unity2Ubuntu.Point PointTangency = 4;
inline bool Unity2Ubuntu::has_pointtangency() const {
  return this != internal_default_instance() && pointtangency_ != NULL;
}
inline void Unity2Ubuntu::clear_pointtangency() {
  if (GetArenaNoVirtual() == NULL && pointtangency_ != NULL) {
    delete pointtangency_;
  }
  pointtangency_ = NULL;
}
inline const ::FootballPoint::Unity2Ubuntu_Point& Unity2Ubuntu::_internal_pointtangency() const {
  return *pointtangency_;
}
inline const ::FootballPoint::Unity2Ubuntu_Point& Unity2Ubuntu::pointtangency() const {
  const ::FootballPoint::Unity2Ubuntu_Point* p = pointtangency_;
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.PointTangency)
  return p != NULL ? *p : *reinterpret_cast<const ::FootballPoint::Unity2Ubuntu_Point*>(
      &::FootballPoint::_Unity2Ubuntu_Point_default_instance_);
}
inline ::FootballPoint::Unity2Ubuntu_Point* Unity2Ubuntu::release_pointtangency() {
  // @@protoc_insertion_point(field_release:FootballPoint.Unity2Ubuntu.PointTangency)
  
  ::FootballPoint::Unity2Ubuntu_Point* temp = pointtangency_;
  pointtangency_ = NULL;
  return temp;
}
inline ::FootballPoint::Unity2Ubuntu_Point* Unity2Ubuntu::mutable_pointtangency() {
  
  if (pointtangency_ == NULL) {
    auto* p = CreateMaybeMessage<::FootballPoint::Unity2Ubuntu_Point>(GetArenaNoVirtual());
    pointtangency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FootballPoint.Unity2Ubuntu.PointTangency)
  return pointtangency_;
}
inline void Unity2Ubuntu::set_allocated_pointtangency(::FootballPoint::Unity2Ubuntu_Point* pointtangency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pointtangency_;
  }
  if (pointtangency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pointtangency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pointtangency, submessage_arena);
    }
    
  } else {
    
  }
  pointtangency_ = pointtangency;
  // @@protoc_insertion_point(field_set_allocated:FootballPoint.Unity2Ubuntu.PointTangency)
}

// bool IfShoot = 5;
inline void Unity2Ubuntu::clear_ifshoot() {
  ifshoot_ = false;
}
inline bool Unity2Ubuntu::ifshoot() const {
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.IfShoot)
  return ifshoot_;
}
inline void Unity2Ubuntu::set_ifshoot(bool value) {
  
  ifshoot_ = value;
  // @@protoc_insertion_point(field_set:FootballPoint.Unity2Ubuntu.IfShoot)
}

// .FootballPoint.Unity2Ubuntu.GameReplayEnum GameReplay = 6;
inline void Unity2Ubuntu::clear_gamereplay() {
  gamereplay_ = 0;
}
inline ::FootballPoint::Unity2Ubuntu_GameReplayEnum Unity2Ubuntu::gamereplay() const {
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.GameReplay)
  return static_cast< ::FootballPoint::Unity2Ubuntu_GameReplayEnum >(gamereplay_);
}
inline void Unity2Ubuntu::set_gamereplay(::FootballPoint::Unity2Ubuntu_GameReplayEnum value) {
  
  gamereplay_ = value;
  // @@protoc_insertion_point(field_set:FootballPoint.Unity2Ubuntu.GameReplay)
}

// .FootballPoint.Unity2Ubuntu.ClockwiseEnum ClockDirection = 7;
inline void Unity2Ubuntu::clear_clockdirection() {
  clockdirection_ = 0;
}
inline ::FootballPoint::Unity2Ubuntu_ClockwiseEnum Unity2Ubuntu::clockdirection() const {
  // @@protoc_insertion_point(field_get:FootballPoint.Unity2Ubuntu.ClockDirection)
  return static_cast< ::FootballPoint::Unity2Ubuntu_ClockwiseEnum >(clockdirection_);
}
inline void Unity2Ubuntu::set_clockdirection(::FootballPoint::Unity2Ubuntu_ClockwiseEnum value) {
  
  clockdirection_ = value;
  // @@protoc_insertion_point(field_set:FootballPoint.Unity2Ubuntu.ClockDirection)
}

// -------------------------------------------------------------------

// Ubuntu2Unity

// .FootballPoint.Ubuntu2Unity.DataReceivedEnum DataReceived = 1;
inline void Ubuntu2Unity::clear_datareceived() {
  datareceived_ = 0;
}
inline ::FootballPoint::Ubuntu2Unity_DataReceivedEnum Ubuntu2Unity::datareceived() const {
  // @@protoc_insertion_point(field_get:FootballPoint.Ubuntu2Unity.DataReceived)
  return static_cast< ::FootballPoint::Ubuntu2Unity_DataReceivedEnum >(datareceived_);
}
inline void Ubuntu2Unity::set_datareceived(::FootballPoint::Ubuntu2Unity_DataReceivedEnum value) {
  
  datareceived_ = value;
  // @@protoc_insertion_point(field_set:FootballPoint.Ubuntu2Unity.DataReceived)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FootballPoint

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FootballPoint::Unity2Ubuntu_GameReplayEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FootballPoint::Unity2Ubuntu_GameReplayEnum>() {
  return ::FootballPoint::Unity2Ubuntu_GameReplayEnum_descriptor();
}
template <> struct is_proto_enum< ::FootballPoint::Unity2Ubuntu_ClockwiseEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FootballPoint::Unity2Ubuntu_ClockwiseEnum>() {
  return ::FootballPoint::Unity2Ubuntu_ClockwiseEnum_descriptor();
}
template <> struct is_proto_enum< ::FootballPoint::Ubuntu2Unity_DataReceivedEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FootballPoint::Ubuntu2Unity_DataReceivedEnum>() {
  return ::FootballPoint::Ubuntu2Unity_DataReceivedEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_FootballPoint_2eproto
